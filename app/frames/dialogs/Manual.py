# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Manual.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(338, 523)
        self.ManualTabWidget = QtWidgets.QTabWidget(Dialog)
        self.ManualTabWidget.setGeometry(QtCore.QRect(-10, 0, 351, 531))
        self.ManualTabWidget.setObjectName("ManualTabWidget")
        self.ManualTab1 = QtWidgets.QWidget()
        self.ManualTab1.setObjectName("ManualTab1")
        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.ManualTab1)
        self.plainTextEdit.setGeometry(QtCore.QRect(10, 0, 331, 491))
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.ManualTabWidget.addTab(self.ManualTab1, "")
        self.ManualTab2 = QtWidgets.QWidget()
        self.ManualTab2.setObjectName("ManualTab2")
        self.plainTextEdit_2 = QtWidgets.QPlainTextEdit(self.ManualTab2)
        self.plainTextEdit_2.setGeometry(QtCore.QRect(10, 0, 331, 501))
        self.plainTextEdit_2.setObjectName("plainTextEdit_2")
        self.ManualTabWidget.addTab(self.ManualTab2, "")
        self.ManualTab3 = QtWidgets.QWidget()
        self.ManualTab3.setObjectName("ManualTab3")
        self.plainTextEdit_3 = QtWidgets.QPlainTextEdit(self.ManualTab3)
        self.plainTextEdit_3.setGeometry(QtCore.QRect(10, 0, 331, 491))
        self.plainTextEdit_3.setObjectName("plainTextEdit_3")
        self.ManualTabWidget.addTab(self.ManualTab3, "")

        self.retranslateUi(Dialog)
        self.ManualTabWidget.setCurrentIndex(2)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Manual"))
        self.plainTextEdit.setPlainText(_translate("Dialog", "In this section, you will find the main database management functions. On the main screen, the current database is displayed, as well as an option box that shows the existing tables within the Docker image.\n"
"\n"
"To filter a value, choose a column to use as the filter, type the value you wish to search for, then press Enter. At the bottom, you can find the main functions for the current database: Input, Update, and Delete for creating, updating, and deleting rows, and a corner button for deleting the database, if needed.\n"
"\n"
"In the top File menu, the Select File button will open a file explorer for selecting CSV files to become Postgres tables. If the CSV file has a column eligible to become a primary key, a confirmation screen will appear. In the Database menu, the Create Database option provides a step-by-step guide for creating a new empty customized database. In the Docker menu, the Create Container option starts a new Postgres container designed for Cmapper.\n"
"\n"
"Finally, in the left menu, the options are the mainframe features, where you\'ll be able to choose from various features related to data processing."))
        self.ManualTabWidget.setTabText(self.ManualTabWidget.indexOf(self.ManualTab1), _translate("Dialog", "Database"))
        self.plainTextEdit_2.setPlainText(_translate("Dialog", "In this section, you\'ll be able to turn tables into dataframes, edit them, and create a correlation map for the current edited dataframe. The options are simple and straightforward:\n"
"\n"
"Drop Column: Drop columns.\n"
"Encode: Choose an encoder for columns.\n"
"Preview: View a sample of how the dataframe looks.\n"
"Reload: Remake the dataframe.\n"
"In Save DF, you\'ll be able to select a folder and file name to save your dataframe. Generate will create a correlation map of the dataframe.\n"
"\n"
"It\'s important to keep in mind: every time the \"Dataframe Edit\" button is clicked, the dataframe will automatically reload to the displayed table. So, if you edit a dataframe, proceed to Machine Learning, and return to Dataframe Edit, the processed dataframe will be lost and a new one will appear. To work around this, buttons for previewing and saving dataframes are present in other features."))
        self.ManualTabWidget.setTabText(self.ManualTabWidget.indexOf(self.ManualTab2), _translate("Dialog", "Dataframe Edit"))
        self.plainTextEdit_3.setPlainText(_translate("Dialog", "In this section, plenty machine learning algorithms can be used, and more are to be added. Simple and straightforward. The features will use the same dataframe processed by Dataframe Edit and Dimensional Reduction. \n"
""))
        self.ManualTabWidget.setTabText(self.ManualTabWidget.indexOf(self.ManualTab3), _translate("Dialog", "Machine Learning"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
